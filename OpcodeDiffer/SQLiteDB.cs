using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.SQLite;

namespace OpcodeDiffer
{
    /// <summary>
    /// Class to access SQLite databases
    /// </summary>
    public class SQLiteDB
    {
        protected SQLiteConnection dbConnection;
        protected SQLiteDataReader reader;

        public SQLiteDB(string dbPath)
        {
            dbConnection = new SQLiteConnection(string.Format("Data Source={0};FailIfMissing=True;", dbPath));
            dbConnection.Open();
        }
        
        public bool isOpen()
        {
            return dbConnection.State == System.Data.ConnectionState.Open;
        }

        protected void closeReaderIfOpen()
        {
            if (reader != null)
            {
                if (!reader.IsClosed)
                    reader.Close();
            }
        }

        ~SQLiteDB()
        {
            dbConnection.Dispose();
        }
    }

    /// <summary>
    /// Class specific to accessing SQLite database generated by BinDiff
    /// </summary>
    public class DiffDB : SQLiteDB
    {
        public DiffDB(string dbPath) : base(dbPath) { }

        //public Int32 getOldFunction(uint NewFunctionAddr)
        //{
        //    string sql = string.Format("SELECT * FROM function WHERE address1={0}", NewFunctionAddr.ToString());
        //    SQLiteCommand command = new SQLiteCommand(sql, dbConnection);
        //    reader = command.ExecuteReader();
        //    if (reader.Read())
        //        return reader.GetInt32(2);
        //    else
        //        return 0;
        //}

        //public double getCertianty(uint NewFunctionAddr)
        //{
        //    string sql = string.Format("SELECT * FROM function WHERE address1={0}", NewFunctionAddr.ToString());
        //    SQLiteCommand command = new SQLiteCommand(sql, dbConnection);
        //    reader = command.ExecuteReader();
        //    if (reader.Read())
        //        return reader.GetDouble(4);
        //    else
        //        return 0.0f;
        //}
    }

    /// <summary>
    /// Generic prototype class to acces an SQLite database generated by WoWOpcodeDumper
    /// </summary>
    public class ProtoDumpDB : SQLiteDB
    {
        public struct Version
        {
            public Version(int clientBuild, double cumperVersion) : this()
            {
                this.clientBuild = clientBuild;
                this.dumperVersion = dumperVersion;
            }

            public int clientBuild { get; private set; }
            public double dumperVersion { get; private set; }
        }

        protected ProtoDumpDB(string dbPath)
            : base(dbPath)
        {
            CMSG_getCallerFromOpcode = new SQLiteCommand("SELECT caller FROM CMSG WHERE opcode=@opcode", dbConnection);
            SMSG_getHandlerFromOpcode = new SQLiteCommand("SELECT handler FROM SMSG WHERE opcode=@opcode", dbConnection);

            // Get DB version
            SQLiteCommand getDbVersion = new SQLiteCommand("SELECT * FROM Version", dbConnection);
            SQLiteDataReader versionReader = getDbVersion.ExecuteReader();

            versionReader.Read();
            dbVersion = new Version(versionReader.GetInt32(0), versionReader.GetDouble(1));

            // Dispose
            versionReader.Dispose();
            getDbVersion.Dispose();
        }

        Version dbVersion;
        SQLiteCommand CMSG_getCallerFromOpcode;
        SQLiteCommand SMSG_getHandlerFromOpcode;

        public UInt32 CMSG_GetCallerFromOpcode(int opcode)
        {
            // Write parameter
            CMSG_getCallerFromOpcode.Parameters.AddWithValue("@opcode", opcode);

            // Run Query
            return (UInt32)CMSG_getCallerFromOpcode.ExecuteScalar();
        }
        public UInt32 SMSG_GetHandlerFromOpcode(int opcode)
        {
            // Write parameters
            SMSG_getHandlerFromOpcode.Parameters.AddWithValue("@opcode", opcode);

            // Run query
            return (UInt32)SMSG_getHandlerFromOpcode.ExecuteScalar();
        }
        
    }

    /// <summary>
    /// Class to access a named SQLite database designed to be diffed against
    /// </summary>
    public class NameDB : ProtoDumpDB
    {
        public NameDB(string dbPath)
            : base(dbPath)
        {
            writeNameCmd = new SQLiteCommand("UPDATE @type set name=@name WHERE opcode=@opcode", dbConnection);
            CMSG_getNameFromCaller = new SQLiteCommand("SELECT name FROM CMSG WHERE caller=@caller", dbConnection);
            SMSG_getNameFromHandler = new SQLiteCommand("SELECT name FROM SMSG WHERE handler=@handler", dbConnection);
        }

        SQLiteCommand writeNameCmd;
        SQLiteCommand CMSG_getNameFromCaller;
        SQLiteCommand SMSG_getNameFromHandler;

        public void CMSG_writeName(int opcode, string name)
        {
            // Write parameters
            writeNameCmd.Parameters.AddWithValue("@type", "CMSG");
            writeNameCmd.Parameters.AddWithValue("@name", name);
            writeNameCmd.Parameters.AddWithValue("@opcode", opcode);

            // Execute query and clear parameters
            writeNameCmd.ExecuteNonQuery();
            writeNameCmd.Parameters.Clear();
        }
        public void SMSG_writeName(int opcode, string name)
        {
            // Write parameters
            writeNameCmd.Parameters.AddWithValue("@type", "SMSG");
            writeNameCmd.Parameters.AddWithValue("@name", name);
            writeNameCmd.Parameters.AddWithValue("@opcode", opcode);

            // Execute query and clear parameters
            writeNameCmd.ExecuteNonQuery();
            writeNameCmd.Parameters.Clear();
        }
        public string SMSG_GetNameFromHandler(UInt32 handler)
        {
            // Add parameter
            SMSG_getNameFromHandler.Parameters.AddWithValue("@handler", handler);

            // Execute query
            return (string)SMSG_getNameFromHandler.ExecuteScalar();

        }
        public string CMSG_GetNameFromCaller(UInt32 caller)
        {
            // Add parameter
            CMSG_getNameFromCaller.Parameters.AddWithValue("@caller", caller);

            // Execute query
            return (string)CMSG_getNameFromCaller.ExecuteScalar();
        }
    }

    /// <summary>
    /// Class to access SQLite database generated by dumper
    /// </summary>
    public class DumpDB : ProtoDumpDB
    {
        public DumpDB(string dbPath) :
            base(dbPath)
        {
            CMSG_get = new SQLiteCommand("SELECT * FROM CMSG WHERE opcode=@opcode", dbConnection);
            SMSG_get = new SQLiteCommand("SELECT * FROM SMSG WHERE opcode=@opcode", dbConnection);
        }

        SQLiteCommand CMSG_get;
        SQLiteCommand SMSG_get;

        public CMSG CMSG_Get(int opcode)
        {
            // Write parameter
            CMSG_get.Parameters.AddWithValue("@opcode", opcode);

            // Execute Query
            closeReaderIfOpen();
            reader = CMSG_get.ExecuteReader();
            if (reader.Read())
                return new CMSG(reader.GetInt32(0), (UInt32)reader.GetInt32(1), (UInt32)reader.GetInt32(2), (UInt32)reader.GetInt32(3));
            else
                return null;
        }
        public SMSG SMSG_Get(int opcode)
        {
            // Write parameter
            SMSG_get.Parameters.AddWithValue("@Opcode", opcode);

            // Execute Query
            closeReaderIfOpen();
            reader = SMSG_get.ExecuteReader();
            if (reader.Read())
                return new SMSG(reader.GetInt32(0), (UInt32)reader.GetInt32(1), (UInt32)reader.GetInt32(2), (UInt32)reader.GetInt32(3));
            else
                return null;
        }
    }
}

